{"version":3,"sources":["reducers.js","Components/Card.js","Components/CardList.js","Components/SearchBar.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","map","robot","i","Components_Card","key","SearchBar","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","toLowerCase","includes","Components_SearchBar","Components_Scroll","Components_ErrorBoundry","Components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","resp","json","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.191357c5.chunk.js","sourcesContent":["import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n } from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: '',\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD: \r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\r\n\t\tdefault: \r\n\t\t\treturn state;  \r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: '', \r\n}\r\n\r\nexport const requestRobots = ( state=initialStateRobots, action=[]) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true })\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false})\r\n\t\tdefault: \r\n\t\t\treturn state; \r\n\t}\r\n}","import React from 'react'; \r\n\r\n\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\treturn (\r\n\t\t<div className='card tc dib bg-gray ma2 br3 grow shadow-5 bw2'>\r\n\t\t\t<img src={`https://robohash.org/${id}?150x150`} alt=''/> \r\n\t\t\t<div>\r\n\t\t\t\t<h4>{name}</h4>\r\n\t\t\t\t<p>{email}</p> \r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react'; \r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{ robots.map((robot, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t <Card \r\n\t\t\t\t\t \tkey={robot.id} \r\n\t\t\t\t\t \tid={robot.id} \r\n\t\t\t\t\t \tname={robot.name} \r\n\t\t\t\t\t \temail={robot.email} \r\n\t\t\t\t\t /> \r\n\t\t\t\t \t)\r\n\t\t\t\t})\t\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CardList; ","import React from 'react'; \r\n\r\nconst SearchBar =  ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2 tc'>\r\n\t\t\t<input  \r\n\t\t\t\tclassName='tc pa3 ba b--green bg-lightest-blue' \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange}/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBar; ","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props); \r\n\t\tthis.state = {\r\n\t\t\thasError: false, \r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { hasError } = this.state; \r\n\r\n\t\tif (hasError) {\r\n\t\t\treturn <h1>Oops! Something went wrong</h1> \r\n\t\t}\r\n\t\treturn this.props.children; \r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry; ","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBar from '../Components/SearchBar'; \r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error,\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots(); \r\n\t}\r\n\r\n\trender() { \r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase()); \r\n\t\t})\r\n\r\n\t\treturn isPending ?\r\n\t\t<h1>Loading...</h1> :\r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBar searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App); ","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n } from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD, \r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(resp => resp.json())\r\n\t\t\t.then(json => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: json }))\r\n\t\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD'\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers'; \nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker'; \n\nconst logger = createLogger(); \nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); \n\nReactDOM.render(\n\t<Provider  store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}